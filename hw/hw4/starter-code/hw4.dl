/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)
.decl D(a:PersonType,b:PersonType)
.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

/*
  1. Create list of parent_child only with Priscilla
  2. Recursively percolate down
*/

D(a,b) :- parent_child(a,b), a="Priscilla".
D(a,c) :- D(a,b), parent_child(b,c), a="Priscilla".
p1(x, d):- D(y, x), person(x, d).

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl W(a:PersonType, b:PersonType)
.decl M(a:PersonType, b:PersonType)
.decl Wn(a:PersonType, m: number)
.decl Mn(a:PersonType, m: number)
.decl Wmax(n: number)
.decl Mmax(n: number)
.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

/*
  1. Create two lists with parent_child, one with female parents, the other with male parents
  2. Create a list with parents with their number of children
  3. Create a list with max number (because I couldn't put the max number into final predicate)
  4. Pull info from these tables into p2
*/

W(a,b):- parent_child(a,b), female(a).
M(a,b):- parent_child(a,b), male(a).
Wn(a,m):- W(a,_), m = count: {W(a,b)}.
Mn(a,m):- M(a,_), m = count: {M(a,b)}.
Wmax(n):- n = max m : {Wn(a,m)}.
Mmax(n):- n = max m : {Mn(a,m)}.
p2(x, d, m):- Wmax(m), Wn(x, m), person(x, d).
p2(x, d, m):- Mmax(m), Mn(x, m), person(x, d).

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
.decl A(x:PersonType, y:PersonType, n: number)
.decl hasParent(x:PersonType)
.decl noParent(x:PersonType)
.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

/*
  1. Create a list of people who has a parent
  2. Create a list of people who doesn't have a parent
  3. Recursively percolate down to get all generation from people without parent
  4. Pull info from the generation list with children that are from person_living
*/

hasParent(x):- parent_child(_,x).
noParent(x):- parent_child(x,_), !hasParent(x).
A(a,b,n):- parent_child(a,b), noParent(a), n=1.
A(b,c,m):- A(a,b,n), parent_child(b,c), m = n + 1.
p3(x, m1, m2):- person_living(x), m1 = min n:{A(_,x,n)}, m2 = max n:{A(_,x,n)}.

/************* problem 4 **************/
.decl p4(x:PersonType)
.decl mom(x:PersonType, y:PersonType)
.decl numberLiving(x: number)
.decl numberLivingDescendents(x:PersonType, n: number)
.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)
.output mom(filename="yee.ans")

/*
  1. MCA means that the descendent of a woman include all the person_living
  2. mom(x,y) has all the matrilinial relationship from the living person
  SKETCHY PART
  3. count number of person_living
  4. count number of living descendents for each MCA
  5. If the numbers from 3 and 4 match, the female is MCA!
*/

mom(a,b):- female(a), person_living(b), parent_child(a,b).
mom(a,c):- female(a), parent_child(a,b), mom(b,c).
numberLiving(x):- x = count:{person_living(_)}.
numberLivingDescendents(x, n):- mom(x, _), n = count: {mom(x,_)}.
p4(x):- numberLivingDescendents(x,n), numberLiving(n).

/************* problem 5 **************/
.decl p5(x:PersonType)
.decl generationNumber(x:PersonType, n:number)
.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)

/*
  1. Use previous predicates to find generation numbers for each MCA
  2. Higher Generation means most recent, so look for max number.
*/

generationNumber(x, n):- p4(x), n= max m:{A(_, x, m)}.
p5(x):- generationNumber(x,n), n = max m:{generationNumber(_, m)}.
